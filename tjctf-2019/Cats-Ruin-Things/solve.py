from math import gcd
from Crypto.Hash import SHA256
from binascii import unhexlify

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

if __name__ == '__main__':
    m = b'hoge'
    mh = int('568b4c0dd27a8e9fb910d46e552dd6cb5c3da1a66b3eccea3cbaf54a7bede3f7', 16)
    #N = int(input('input N:'))
    N = 27743666287983023341754851647387073822237904953372321967816679624556765775781067690265096877588703087269505488818886965191672380256253769633547104995914578634150364205795536674329108975870006953687026838486145950127374714666755614839528508055608736971014170520892948559729940000077760348751881753343815063087125170686004449145374440074595133482326407873390918439794538862671400388781069783132696669540121426825400531804306426613686092148766813853417667365735244952690957360251798882878881074322264026355751602038150983508446461770057645691938250858441299326851567866786857938216019355385328100722159816056077544698527
    #mhdash = int(input('input "wrong" signature:'))
    mhdash = 10338673256103544513696142401189935514069118910806934766037085516121527688619590648565672551079611819681677561445658403144876803480831774252024868822226970069815017466644657704467583232028432038172642929568928836652756396976024553551976192891036907037924064598663401307101079376944046566616440432410736038698023263783290426040384444249517105936902551814312375687453540677770016781580959617608173137787722365592186002065332824920977649025628534392747934629298620864086307636819688854326291036166415217426623104850124195007763490230408862358154516710207282936013404807189048589753170080203617948679585164907910182129967
    p = gcd(abs(mh - mhdash), N)
    q = N // p
    e = 65537
    print(p, q)
    #C = int(input('input encrypted message'))
    #flag = pow(C, modinv(e, (p - 1)*(q - 1)), N)
    #print(unhexlify(hex(flag)))